// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  define(function() {
    var MicroEvent;
    return MicroEvent = (function() {
      function MicroEvent() {}

      MicroEvent.prototype.on = function(e, handler) {
        var _base;
        this._events || (this._events = {});
        (_base = this._events)[e] || (_base[e] = []);
        this._events[e].push(handler);
        return this;
      };

      MicroEvent.prototype.once = function(e, handler) {
        this.on(e, (function(_this) {
          return function() {
            handler.apply(_this, arguments);
            return _this.off(e, handler);
          };
        })(this));
        return this;
      };

      MicroEvent.prototype.off = function(e, handler) {
        if (!this._events) {
          return;
        }
        if (this._events[e]) {
          this._events[e].splice(this._events[e].indexOf(handler), 1);
        }
        return this;
      };

      MicroEvent.prototype.emit = function() {
        var data, e, handler, _i, _len, _ref;
        e = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!this._events) {
          return;
        }
        if (this._events[e]) {
          _ref = this._events[e];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            handler = _ref[_i];
            handler.apply(this, arguments);
          }
        }
        return this;
      };

      MicroEvent.Mixin = function(target) {
        var name, property, _ref;
        _ref = MicroEvent.prototype;
        for (name in _ref) {
          if (!__hasProp.call(_ref, name)) continue;
          property = _ref[name];
          target.prototype[name] = property;
        }
        return target;
      };

      return MicroEvent;

    })();
  });

}).call(this);
