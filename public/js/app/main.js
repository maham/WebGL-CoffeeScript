// Generated by CoffeeScript 1.8.0
(function() {
  requirejs(['app/gl', 'app/metronome', 'app/microajax', 'app/camera', 'app/game', 'app/assetloader'], function(GL, Metronome, MicroAjax, Camera, Game, AssetLoader) {
    var capsuleData, cubeData, fragmentShaderSource, startGL, vertexShaderSource, waitForAssets;
    fragmentShaderSource = vertexShaderSource = cubeData = capsuleData = null;
    new MicroAjax('./shaders/fShader.frag', function(resource) {
      console.log('Fragment shader loaded.');
      return fragmentShaderSource = resource;
    });
    new MicroAjax('./shaders/vShader.vert', function(resource) {
      console.log('Vertex shader loaded.');
      return vertexShaderSource = resource;
    });
    new MicroAjax('./meshes/cube.obj', function(resource) {
      console.log('Cube data loaded.');
      return cubeData = resource;
    });
    new MicroAjax('./meshes/capsule.obj', function(resource) {
      console.log('Capsule data loaded.');
      return capsuleData = resource;
    });

    /*
    new AssetLoader {
        fragmentShaderSource: './shaders/fShader.frag'
        vertexShaderSource: './shaders/vShader.vert'
        cubeData: './meshes/cube.obj'
        capsuleData: './meshes/capsule.obj'
    }, ( assets ) ->
        fragmentShaderSource = assets['fragmentShaderSource']
        vertexShaderSource = assets['vertexShaderSource']
        cubeData = assets['cubeData']
        capsuleData = assets['capsuleData']
    
        startGL 'lesson01-canvas', fragmentShaderSource, vertexShaderSource
     *
     */
    waitForAssets = function() {
      return setTimeout(function() {
        if ((fragmentShaderSource != null) && (vertexShaderSource != null) && (cubeData != null) && (capsuleData != null)) {
          return startGL('lesson01-canvas', fragmentShaderSource, vertexShaderSource);
        } else {
          return waitForAssets();
        }
      }, 1000);
    };
    waitForAssets();
    return startGL = function(canvasElementId, fragmentShaderSource, vertexShaderSource) {
      var capsule, cube, game;
      game = new Game(60, canvasElementId, vertexShaderSource, fragmentShaderSource);
      game.start();
      capsule = game.addMesh(capsuleData);
      capsule.position[0] = -2;
      cube = game.addMesh(cubeData);
      cube.position[0] = 2;
      return game.setCamera(new Camera([0, 0, 7], [0, 0, 0]));
    };
  }, false);

}).call(this);
