// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  define(function() {
    var ObjParser;
    return ObjParser = (function() {
      function ObjParser() {
        this.parsed = [[], [], []];
        this.out = [];
        this.indices = [];
      }

      ObjParser.prototype.parse = function(objData) {
        var line, tokens, _i, _len, _ref;
        _ref = objData.split('\n');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          if ((line.charAt(0)) === '#' || line.length < 1) {
            continue;
          }
          tokens = line.trim().split(/\s+/);
          if (this[tokens[0]]) {
            this[tokens[0]].apply(this, tokens.slice(1));
          }
        }
      };

      ObjParser.prototype.v = function(x, y, z) {
        this.parsed[0].push([parseFloat(x), parseFloat(y), parseFloat(z)]);
      };

      ObjParser.prototype.vt = function(u, v) {
        this.parsed[2].push([parseFloat(u), parseFloat(v)]);
      };

      ObjParser.prototype.vn = function(i, j, k) {
        this.parsed[1].push([parseFloat(i), parseFloat(j), parseFloat(k)]);
      };

      ObjParser.prototype.f = function() {
        var components, currentComponentIndex, currentIndex, index, indices, parsedIndex, _i, _j, _ref, _ref1;
        indices = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (currentIndex = _i = 0, _ref = indices.length; 0 <= _ref ? _i < _ref : _i > _ref; currentIndex = 0 <= _ref ? ++_i : --_i) {
          components = indices[currentIndex].split('/');
          for (currentComponentIndex = _j = 0, _ref1 = components.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; currentComponentIndex = 0 <= _ref1 ? ++_j : --_j) {
            if (currentComponentIndex > 0) {
              continue;
            }
            index = parseInt(components[currentComponentIndex]);
            if (index > 0) {
              parsedIndex = index - 1;
            } else {
              parsedIndex = this.parsed[currentComponentIndex].length + index;
            }
            this.out.push.apply(this.out, this.parsed[currentComponentIndex][parsedIndex]);
          }
          this.indices.push(this.indices.length);
        }
      };

      return ObjParser;

    })();
  });

}).call(this);
